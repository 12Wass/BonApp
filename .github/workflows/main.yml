name: Deploy to production
on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:

  frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - uses: actions/checkout@v1
      - name: Make envfile for frontend
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_REACT_APP_URL_BACKEND: ${{ secrets.REACT_APP_URL_BACKEND }}
          envkey_REACT_APP_SOCKET_BACKEND: ${{ secrets.REACT_APP_SOCKET_BACKEND }}
          envkey_REACT_APP_GOOGLE_AUTH_CLIENT_ID: ${{ secrets.REACT_APP_GOOGLE_AUTH_CLIENT_ID }}
          envkey_REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets.REACT_APP_STRIPE_PUBLIC_KEY }}
          envkey_DANGEROUSLY_DISABLE_HOST_CHECK: true
          directory: ./packages/frontend/
          file_name: .env
          fail_on_empty: true
      - name: Build & Push Image for front-manager
        run: |
          cd packages/front-manager/
          echo "${{ secrets.DOCKERPW }}" | docker login -u ${{ secrets.DOCKERUSER }} --password-stdin
          docker image build -f Dockerfile.local --tag yassansplus/front-managerbonapp:${{ steps.date.outputs.date }}.${{ github.actor }} --tag yassansplus/front-managerbonapp:develop .
          docker push yassansplus/front-managerbonapp:${{ steps.date.outputs.date }}.${{ github.actor }}
          docker push yassansplus/front-managerbonapp:develop

  front-manager:
    name: Build front-manager
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - uses: actions/checkout@v1
      - name: Make envfile for front-manager
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_REACT_APP_URL_BACKEND: ${{ secrets.REACT_APP_URL_BACKEND }}
          envkey_REACT_APP_GOOGLE_API_KEY: ${{ secrets.REACT_APP_GOOGLE_API_KEY }}
          directory: packages/front-manager/
          file_name: .env
          fail_on_empty: true
      - name: Build & Push Image for front-manager
        run: |
          cd packages/front-manager/
          cat .env
          echo "${{ secrets.DOCKERPW }}" | docker login -u ${{ secrets.DOCKERUSER }} --password-stdin
          docker image build -f Dockerfile.local --tag yassansplus/front-managerbonapp:${{ steps.date.outputs.date }}.${{ github.actor }} --tag yassansplus/front-managerbonapp:develop .
          docker push yassansplus/front-managerbonapp:${{ steps.date.outputs.date }}.${{ github.actor }}
          docker push yassansplus/front-managerbonapp:develop

  backend:
    name: Build backend
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - uses: actions/checkout@v1
      - name: Make envfile for backend
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_JWT_ACCESS_TOKEN_SECRET: ${{ secrets.JWT_ACCESS_TOKEN_SECRET }}
          envkey_JWT_ACCESS_TOKEN_EXPIRATION_TIME_WEB: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME_WEB }}
          envkey_JWT_ACCESS_TOKEN_EXPIRATION_TIME_MOBILE: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRATION_TIME_MOBILE }}
          envkey_URL_API_BACKEND: ${{ secrets.URL_API_BACKEND }}
          envkey_URL_FRONTEND: ${{ secrets.URL_FRONTEND }}
          envkey_URL_FRONTMANAGER: ${{ secrets.URL_FRONTMANAGER }}
          envkey_EXPO_ACCESS_TOKEN: ${{ secrets.EXPO_ACCESS_TOKEN }}
          envkey_MAIL_HOST: ${{ secrets.MAIL_HOST }}
          envkey_MAIL_USER: ${{ secrets.MAIL_USER }}
          envkey_MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          envkey_MAIL_FROM: ${{ secrets.MAIL_FROM }}
          envkey_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          envkey_GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          envkey_GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          envkey_STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          envkey_STRIPE_CURRENCY: ${{ secrets.STRIPE_CURRENCY }}
          envkey_URL_IP_ADDRESS: ${{ secrets.URL_IP_ADDRESS }}
          directory: ./packages/backend/
          file_name: .env
          fail_on_empty: true

      - name: Build & Push Image of backend
        run: |
          cd packages/backend/
          echo "${{ secrets.DOCKERPW }}" | docker login -u ${{ secrets.DOCKERUSER }} --password-stdin
          docker image build -f Dockerfile.local --tag yassansplus/backendbonapp:${{ steps.date.outputs.date }}.${{ github.actor }} --tag yassansplus/backendbonapp:develop .
          docker push yassansplus/backendbonapp:${{ steps.date.outputs.date }}.${{ github.actor }}
          docker push yassansplus/backendbonapp:develop


  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs: [ frontend, front-manager, backend ]
    environment: production
    steps:
      - name: Log to the server and pull the images from docker hub & run the app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd BonApp
            sudo docker stop front_end_prod
            sudo docker stop backend_prod
            sudo docker stop front_manager_prod
            sudo docker system prune -a -f
            sudo docker-compose up -d  --remove-orphans
  
  
  sleep:
    name: Sleep for 30 seconds
    runs-on: ubuntu-latest
    needs: [ deploy ]
    steps:
      - name: Sleep for 30 seconds
        run: sleep 30

  database:
    name: Synchronize and populate the database
    runs-on: ubuntu-latest
    needs: [ sleep ]
    environment: production
    steps:
      - name: Connect to the server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            echo "Initializing database üñ•Ô∏è"
            sudo docker exec back_end_prod yarn schema:sync
            echo "Injecting seeds üíæ"
            sudo docker exec back_end_prod yarn seed:run